let restaurants;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{DBHelper.initServiceWorker(),init()}),init=(async()=>{response=await APIHelper.fetchRestaurants(),restaurants=await response.json();const e=[],t=new Set,n=new Set;restaurants.forEach(a=>{t.add(a.neighborhood),n.add(a.cuisine_type),e.push(DBHelper.add(a))}),fillNeighborhoodsHTML(t),fillCuisinesHTML(n),Promise.all(e).then(()=>{updateRestaurants()}).catch(e=>{console.log(e)})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.tabIndex=0,t.append(n)})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.tabIndex=0,t.append(n)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,a=t.selectedIndex,s=e[n].value,r=t[a].value;APIHelper.fetchRestaurantByCuisineAndNeighborhood(s,r).then(e=>{resetRestaurants(e),fillRestaurantsHTML(e)}).catch(e=>console.error(e))}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=`\n  <li>\n  <picture>\n    <source srcset="img/${e.id}.webp" type="image/webp">\n    <img class="restaurant-img" src="img/${e.id}.png" type="image/png" alt="Picture of the restaurant ${e.name}">\n  </picture>\n    <div class="restaurant-infos">\n      <h1 tabindex="0">${e.name}</h1>\n      <p>${e.neighborhood}</p>\n      <p>${e.address}</p>\n      <a href="./restaurant.html?id=${e.id}">View Details</a>\n    </div>\n  </li>\n  `;return document.createRange().createContextualFragment(t)}),addMarkersToMap=((e=self.restaurants)=>{if("undefined"==typeof google)return self.markers;e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
